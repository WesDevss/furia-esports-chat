import React, { useEffect, useState } from 'react';

// Tipos para as mensagens e usu√°rios
export interface ChatUser {
  _id: string;
  username: string;
  level?: number;
  badges?: string[];
  avatar?: string;
}

export interface ChatMessage {
  id: string;
  user: ChatUser;
  content: string;
  type: 'text' | 'match-update' | 'system' | 'poll' | 'highlight' | 'general';
  timestamp: Date;
  reactions?: Record<string, string[]>;
}

interface ChatSimulatorProps {
  onNewMessage: (message: ChatMessage) => void;
  matchInProgress?: boolean;
  currentRound?: number;
  currentMap?: string;
  score?: { furia: number; opponent: number };
}

// Usu√°rios simulados
const simulatedUsers: ChatUser[] = [
  { _id: 'user1', username: 'CSGOMaster', level: 5, badges: ['Veterano'] },
  { _id: 'user2', username: 'FuriaFanatic', level: 4, badges: ['Membro Premium'] },
  { _id: 'user3', username: 'NaviHater2023', level: 2, badges: [] },
  { _id: 'user4', username: 'BRzao', level: 7, badges: ['Top Torcedor'] },
  { _id: 'user5', username: 'EsportsFan', level: 3, badges: [] },
  { _id: 'user6', username: 'GreenWall', level: 6, badges: ['Membro desde 2020'] },
  { _id: 'user7', username: 'CyberPunk77', level: 4, badges: [] },
  { _id: 'user8', username: 'HEADSHOTonly', level: 8, badges: ['Pro Analyst'] },
  { _id: 'user9', username: 'CS2Lover', level: 3, badges: [] },
  { _id: 'user10', username: 'FuriaFaithful', level: 9, badges: ['OG Fan'] },
  { _id: 'user11', username: 'TorcidaFuria', level: 5, badges: ['F√£ Fiel'] },
  { _id: 'user12', username: 'FURIAFanClub', level: 6, badges: ['F√£ Dedicado'] },
  { _id: 'user13', username: 'BrasilCS', level: 4, badges: [] },
  { _id: 'user14', username: 'FalleNisTheGOAT', level: 7, badges: ['Veterano'] },
  { _id: 'user15', username: 'YuurihFan', level: 5, badges: [] },
];

// Mensagens aleat√≥rias para jogadas
const playMessages = [
  'Nossa, que jogada do YEKINDAR!',
  'KSCERATO est√° jogando muito! üî•',
  'Esse clutch do FalleN foi insano!',
  'yuurih fazendo a diferen√ßa mais uma vez',
  'Que AWP do FalleN! üéØ',
  'Jogada√ßa do molodoy! Ele est√° se adaptando muito bem',
  'FURIA est√° dominando o bombsite A',
  'Que retake incr√≠vel da FURIA!',
  'YEKINDAR entrando muito bem no bombsite',
  'Essa rota√ß√£o da FURIA foi perfeita',
  'KSCERATO com um ace! üî•üî•üî•',
  'Que spray transfer do YEKINDAR! Inacredit√°vel!',
  'Nessa eco a FURIA surpreendeu muito',
  'Grande defesa do B pelo FalleN',
  'A estrat√©gia da FURIA est√° funcionando perfeitamente',
];

// Mensagens de torcida
const cheerMessages = [
  'VAMOS FURIA!!!',
  'Hoje √© dia de vit√≥ria! üí™',
  'Brasil representando! üáßüá∑',
  'FURIAAAAA üî•üî•üî•',
  'Confian√ßa total na FURIA hoje',
  'D√° pra ganhar f√°cil esse!',
  'VAMOOOOOO',
  'Acredito demais nesse time!',
  '#GoFURIA',
  'Melhor time do Brasil sem d√∫vidas',
  'HOJE TEM VIT√ìRIA',
  'FURIA melhor lineup da hist√≥ria!',
  'Vibra√ß√£o positiva pro time! üôè',
  'Orgulho da FURIA!',
  'Estamos juntos nessa! #FURIAArmy',
];

// Mensagens de coment√°rios sobre o jogo
const commentMessages = [
  'A defesa da FURIA est√° muito s√≥lida neste mapa',
  'Esse s1mple est√° dando trabalho, mas a FURIA est√° sabendo controlar bem',
  'A rota√ß√£o da FURIA no meio do mapa est√° fazendo toda a diferen√ßa',
  'O time parece mais confiante hoje',
  'O CT da FURIA no Inferno sempre foi forte',
  'Essa linha de granadas da FURIA √© muito bem trabalhada',
  'Acho que a FURIA devia focar mais no meio do mapa',
  'O time advers√°rio n√£o est√° conseguindo entrar nos bombsites',
  '√ìtimo anti-strat da FURIA nessa rodada',
  'Nossa economia est√° boa, vamos ter armas para os pr√≥ximos rounds',
  'A FURIA est√° lendo muito bem o jogo dos advers√°rios',
  'Esse mapa √© bom para nosso estilo de jogo',
  'Precisamos segurar o AWP do advers√°rio',
  'YEKINDAR est√° muito agressivo hoje, funcionando bem',
  'A utility usage da FURIA est√° impec√°vel',
];

// Mensagens de perguntas
const questionMessages = [
  'Quando √© o pr√≥ximo jogo da FURIA?',
  'Algu√©m sabe se o molodoy est√° bem? Parecia machucado',
  'Quem √© o IGL atual da FURIA?',
  'Contra quem jogamos na pr√≥xima fase se ganharmos?',
  'Quando come√ßa o pr√≥ximo mapa?',
  'Qual √© o mapa depois desse?',
  'Algu√©m tem o link da stream?',
  'Em qual campeonato √© esse jogo?',
  'Os ingressos para o pr√≥ximo Major j√° est√£o √† venda?',
  'O bootcamp da FURIA ainda √© na Europa?',
  'Quanto est√° o placar do campeonato?',
  'A FURIA j√° est√° classificada se ganhar?',
  'Que horas √© o pr√≥ximo jogo?',
  'Algu√©m sabe o recorde do YEKINDAR nesse mapa?',
  'Quem √© o jogador com mais kills at√© agora?',
];

// Adicionando mensagens gerais para conversas fora de jogos
const generalMessages = [
  'Algu√©m ansioso para o pr√≥ximo torneio da FURIA?',
  'O treino da FURIA t√° indo bem pelo que vi nas redes sociais',
  'Quais jogos voc√™s mais gostam de acompanhar da FURIA?',
  'Acho que a FURIA tem potencial para ganhar o pr√≥ximo Major',
  'O que voc√™s acham do novo uniforme da FURIA?',
  'Estou planejando ir ao pr√≥ximo evento, algu√©m mais vai?',
  'Tem algu√©m aqui que j√° conheceu algum jogador da FURIA pessoalmente?',
  'Qual foi o melhor jogo da FURIA que voc√™s j√° viram?',
  'Comecei a torcer para a FURIA ano passado, melhor decis√£o!',
  'Acompanho os treinos do FalleN na Twitch, ele √© incr√≠vel!',
  'J√° compraram os novos produtos da loja da FURIA?',
  'Voc√™s viram a √∫ltima entrevista do guerri? Ele tem uma vis√£o muito boa do jogo',
  'Quem voc√™s acham que √© o jogador mais consistente da FURIA?',
  'O √∫ltimo vlog da FURIA estava muito bom',
  'O ambiente no bootcamp da FURIA parece incr√≠vel',
];

// Sistema para gerar highlights de partida
const generateHighlight = (currentMap: string, round: number): string => {
  const players = ['FalleN', 'KSCERATO', 'yuurih', 'molodoy', 'YEKINDAR'];
  const actions = [
    'fez um clutch 1v3',
    'acertou um headshot incr√≠vel',
    'fez um ACE',
    'fez uma jogada decisiva',
    'salvou a AWP em uma situa√ß√£o imposs√≠vel',
    'defendeu o bomb plant sozinho',
    'fez um 4k para garantir o round',
  ];
  
  const player = players[Math.floor(Math.random() * players.length)];
  const action = actions[Math.floor(Math.random() * actions.length)];
  
  return `${player} ${action} no round ${round} de ${currentMap}!`;
};

// Simulador de chat
const ChatSimulator: React.FC<ChatSimulatorProps> = ({ 
  onNewMessage, 
  matchInProgress = true,
  currentRound = 1,
  currentMap = 'Inferno',
  score = { furia: 0, opponent: 0 } 
}) => {
  const [round, setRound] = useState(currentRound);
  const [mapScore, setMapScore] = useState(score);
  // Armazenar as √∫ltimas mensagens para evitar duplica√ß√µes
  const [recentMessages, setRecentMessages] = useState<string[]>([]);
  
  // Fun√ß√£o para selecionar um usu√°rio aleat√≥rio
  const getRandomUser = (): ChatUser => {
    return simulatedUsers[Math.floor(Math.random() * simulatedUsers.length)];
  };
  
  // Verificar se o conte√∫do √© semelhante a mensagens recentes
  const isDuplicateMessage = (content: string): boolean => {
    return recentMessages.some(message => 
      // Verifica se √© exatamente igual ou muito similar
      message === content || 
      // Verifica se possui mais de 80% de similaridade (mensagens muito parecidas)
      (message.length > 0 && content.length > 0 && 
       (message.includes(content) || content.includes(message)))
    );
  };
  
  // Fun√ß√£o para gerar uma mensagem aleat√≥ria
  const generateRandomMessage = (): ChatMessage => {
    const messageTypes = [
      { type: 'play', weight: matchInProgress ? 30 : 5 },
      { type: 'cheer', weight: matchInProgress ? 25 : 10 },
      { type: 'comment', weight: matchInProgress ? 20 : 15 },
      { type: 'question', weight: 15 },
      { type: 'highlight', weight: matchInProgress ? 10 : 0 },
      { type: 'general', weight: matchInProgress ? 0 : 55 },
    ];
    
    // Total weight
    const totalWeight = messageTypes.reduce((sum, type) => sum + type.weight, 0);
    let random = Math.random() * totalWeight;
    
    // Selecionar tipo de mensagem baseado no peso
    let selectedType = messageTypes[0].type;
    for (const option of messageTypes) {
      if (random < option.weight) {
        selectedType = option.type;
        break;
      }
      random -= option.weight;
    }
    
    // Gerar conte√∫do baseado no tipo
    let content = '';
    let type: 'text' | 'match-update' | 'system' | 'poll' | 'highlight' = 'text';
    let user = getRandomUser();
    
    // Tentar at√© 5 vezes para gerar uma mensagem n√£o duplicada
    let attemptCount = 0;
    let isDuplicate = true;
    
    while (isDuplicate && attemptCount < 5) {
      switch (selectedType) {
        case 'play':
          content = playMessages[Math.floor(Math.random() * playMessages.length)];
          break;
        case 'cheer':
          content = cheerMessages[Math.floor(Math.random() * cheerMessages.length)];
          break;
        case 'comment':
          content = commentMessages[Math.floor(Math.random() * commentMessages.length)];
          break;
        case 'question':
          content = questionMessages[Math.floor(Math.random() * questionMessages.length)];
          break;
        case 'highlight':
          content = generateHighlight(currentMap, round);
          type = 'highlight';
          user = { _id: 'system', username: 'Sistema', badges: ['Oficial'] };
          break;
        case 'general':
          content = generalMessages[Math.floor(Math.random() * generalMessages.length)];
          break;
      }
      
      isDuplicate = isDuplicateMessage(content);
      attemptCount++;
    }
    
    // Atualizar lista de mensagens recentes (manter apenas as √∫ltimas 10)
    setRecentMessages(prev => {
      const updated = [content, ...prev];
      return updated.slice(0, 10);
    });
    
    return {
      id: Date.now().toString() + Math.random().toString(36).substring(2, 9),
      user,
      content,
      type,
      timestamp: new Date()
    };
  };
  
  // Simular atualiza√ß√µes de partida
  const generateScoreUpdate = (): ChatMessage => {
    // Atualizar placar
    const roundWinner = Math.random() > 0.4 ? 'furia' : 'opponent';
    const newScore = {...mapScore};
    
    if (roundWinner === 'furia') {
      newScore.furia += 1;
    } else {
      newScore.opponent += 1;
    }
    
    setMapScore(newScore);
    setRound(round + 1);
    
    // Varia√ß√µes de formato para mensagens de atualiza√ß√£o
    const updateFormats = [
      `${roundWinner === 'furia' ? 'FURIA' : 'Advers√°rio'} vence o round ${round}! Placar: FURIA ${newScore.furia} x ${newScore.opponent} Advers√°rio`,
      `Round ${round} finalizado! ${roundWinner === 'furia' ? 'FURIA' : 'Advers√°rio'} leva a melhor. (${newScore.furia}-${newScore.opponent})`,
      `${roundWinner === 'furia' ? 'FURIA' : 'Advers√°rio'} fecha o round ${round}. Novo placar: ${newScore.furia}-${newScore.opponent}`,
      `PLACAR ATUALIZADO! ${newScore.furia}:${newScore.opponent} ap√≥s ${round} rounds`,
      `Round ${round} para ${roundWinner === 'furia' ? 'FURIA' : 'Advers√°rio'}! Situa√ß√£o atual: FURIA ${newScore.furia}, Advers√°rio ${newScore.opponent}`
    ];
    
    // Selecionar aleatoriamente um formato de mensagem
    const selectedFormat = updateFormats[Math.floor(Math.random() * updateFormats.length)];
    
    // Gerar mensagem de atualiza√ß√£o
    return {
      id: Date.now().toString() + '-update',
      user: { _id: 'system', username: 'Sistema', badges: ['Oficial'] },
      content: selectedFormat,
      type: 'match-update',
      timestamp: new Date()
    };
  };

  useEffect(() => {
    if (!matchInProgress) return;
    
    // Armazenar mensagens recentes para evitar duplica√ß√£o
    const recentMessages: string[] = [];
    
    // Verifica se o conte√∫do √© similar a mensagens recentes
    const isDuplicateMessage = (content: string): boolean => {
      return recentMessages.some(message => 
        message === content || 
        (message.includes(content) || content.includes(message))
      );
    };
    
    // Simula√ß√£o de mensagens regulares (a cada 3-10 segundos)
    const messageInterval = setInterval(() => {
      let newMessage = generateRandomMessage();
      
      // Tenta at√© 3 vezes gerar uma mensagem n√£o duplicada
      let attempts = 0;
      while (isDuplicateMessage(newMessage.content) && attempts < 3) {
        newMessage = generateRandomMessage();
        attempts++;
      }
      
      // Se n√£o √© duplicada ou esgotou tentativas, envia a mensagem
      if (!isDuplicateMessage(newMessage.content) || attempts >= 3) {
        // Adiciona √† lista de mensagens recentes
        recentMessages.unshift(newMessage.content);
        if (recentMessages.length > 8) {
          recentMessages.pop(); // Mant√©m apenas as 8 mensagens mais recentes
        }
        
        onNewMessage(newMessage);
      }
    }, 3000 + Math.random() * 7000);
    
    // Simula√ß√£o de atualiza√ß√µes de placar (a cada 35-60 segundos)
    const updateInterval = setInterval(() => {
      const updateMessage = generateScoreUpdate();
      
      // Adiciona √† lista de mensagens recentes
      recentMessages.unshift(updateMessage.content);
      if (recentMessages.length > 8) {
        recentMessages.pop();
      }
      
      onNewMessage(updateMessage);
    }, 35000 + Math.random() * 25000);
    
    return () => {
      clearInterval(messageInterval);
      clearInterval(updateInterval);
    };
  }, [matchInProgress, round, mapScore]);

  return null; // Componente sem renderiza√ß√£o visual
};

export default ChatSimulator; 